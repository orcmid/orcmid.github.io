<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>R000702 - Beyond Limits</title>
<!--$$Header: /nfoCentrale Compagno Web/orcmid/readings/R000702.htm 6     02-10-13 12:18 Orcmid $-->
</head>

<body bgcolor="#FFFFFF" link="#0000FF" vlink="#800080" alink="#FF0000" text="#000080">

<h1 align="center"><i><a href="./">Readings</a>
Notes</i></h1>

<h1 align="center">R000702: Beyond Limits</h1>

<blockquote>
  <p><b>Frankston, Bob.&nbsp; <a href="milieu.htm#[Frankston1997]">Beyond Limits</a>.&nbsp;
  Chapter 3, pp. 43-57 in Denning, Peter J., Metcalfe, Robert M. (eds.)&nbsp; <i><a href="milieu.htm#[Denning1997]">Beyond Calculation:
      The Next Fifty Years of Computing</a></i>.&nbsp; Copernicus Springer-Verlag (New
      York: 1997).</b></p>
</blockquote>

<p align="center"><b><small>L<span style="font-variant: small-caps">ast updated</span>
 2002-10-13-12:15 -0700 (pdt)</small></b></p>

<hr>

<blockquote>
  <p>&quot;Bob Frankston has long been interested in the possibilities of
  computers and the assumption that there must be something useful about
  them.&nbsp; He is best known for implementing VisiCalc (along with Dan
  Bricklin), the first electronic spreadsheet and the first program to make the
  personal computer a required business tool.&quot;&nbsp; - From the summary
  about the contributors.</p>

</blockquote>
<h2>The first fifty years (pp.44-51)</h2>

<blockquote>
<p>Corbató's law is introduced (p.45):</p>

  <ul>
    <li>The number of lines of code is the same
      independent of the language used.</li>
  </ul>
  <p>[This is an observation about the human grasp
  of complexity, suggesting that we are limited by the size of the
  program.&nbsp; As programming languages improve and increase the level of
  expressions, we can make more powerful programs in the same number of
  lines.&nbsp; We can attack more difficult problems because their programs are
  now within our grasp. -- dh:]</p>
  <p>The term &quot;a pride of programmers&quot; is
  introduced (p.45):</p>
  <p>&quot;Projects that required innovation in too
  many areas at once were unlikely to succeed.&nbsp; The IBM 360 and the Multics
  project were notable exceptions and both experienced long delays in delivering
  on their promises.&nbsp;&nbsp; The lessons of why these programs were so
  difficult are still relevant today.&nbsp; Fred Brook's <i>The Mythical Man
  Month</i> applies to any complex system, not just a large pride of
  programmers.&quot;</p>
  <p>Frankston points out a defect of the 1798
  Malthusean Law on the limits to population growth (p.45):</p>
  <ul>
    <li>We are doomed to starve because population
      increases exponentially and food supply increases only linearly.</li>
  </ul>
  <p>The defect is a failure to take into account
  the nature of change and innovation.&nbsp; In addition (p.46),</p>
  <p>&quot;With computers we have an additional
  element -- the computers themselves are direct agents in the process of
  innovation.&quot;</p>
  <p>On the evolution of programming, Frankston
  makes frequent reference to the transition to descriptive programming.&nbsp;
  He makes an observation that I can certainly support (p.47):</p>
  <p>&quot;The challenge has shifted from providing
  the professional programmer with tools to providing the 'users' with the tools
  to interact directly with the computer.&nbsp; The original users of FORTRAN
  saw themselves as, and they were, scientists and engineers solving their own
  problems. ...&quot;</p>
  <p>Frankston echoes a theme that is consistent
  with Computer Programming for Everyone (CP4E), though with a particular
  solution in mind (p.47):</p>
  <p>&quot;As we've expanded the set of
  'programmers' to include, potentially, anyone using a computer, we've also
  changed the nature of programming.&nbsp; Rather than specify a series of
  steps, one can give examples or a description of what should be done rather
  than the detailed steps of how to do it.&quot;</p>
  <p>There is another statement that appeals to the
  direction programming must take (p.48):</p>
  <p>&quot;It is this ability to use the computer
  as an agent by 'programming' it with behavior that is central to the power of
  computing.&nbsp; It is important to realize that we have converted the user
  into a programmer, just as the phone dial converted people (users?) into phone
  operators.&nbsp; ...</p>
  <p>&quot;Just as there weren't going to be enough
  phone operators, there aren't going to be enough programmers to add the little
  bits of intelligent behavior we are going to expect of the
  infrastructure.&nbsp; And it is this limitation imposed by the need to specify
  behavior that is part of the upcoming challenge.&quot;</p>
  <p>Frankston talks about moving from programming
  to problem solving.&nbsp; There are some juxtapositions I have not fathomed
  (p.49):</p>
  <p>&quot;At best, one can prove that two
  representations of an algorithm are equivalent, but that doesn't address the
  question of whether the program meets a vague requirement.&nbsp; The question
  is whether the program works properly in service of some larger goal.&nbsp;
  There may, in fact, be multiple conflicting goals.</p>
  <p>&quot;Rather than proving programs correct, we
  must make them simple enough to understand.&quot;</p>
  <p>I don't see how this follows, lest it is meant
  to suggest that the correctness of a program should be evident <i>a priori</i>
  as a consequence of its understandability.</p>
  <p>In discussing Occam's razor, Frankton argues
  that &quot;simplification <i>is</i> our goal.&quot;</p>
  <p>Then he says this approach won't work (p.49):</p>
  <p>&quot;But this begs the question since it just
  shifts the problem to finding the right representation, which is unsolvable in
  the general case, both because it reminds us that the nature of the solution
  is a function of the context in which the problem is being solved (ambiguity)
  and simply because it is a restatement of general problem solving.&quot;</p>
  <p>So Frankston is led to the idea of iterating
  and improving a solution.&nbsp; He ends with this (p.49):</p>
  <p>&quot;When we have independent, interacting
  systems we don't necessarily have the option of recomposing them.&nbsp; This
  places a premium on getting an effective representation the first time, but
  inevitably, the initial solution will need to be adjusted as the situation
  changes.&nbsp; To the extent we can, we must be prepared for such
  change.&quot;</p>
</blockquote>
<h2>Becoming the infrastructure</h2>
<blockquote>
  <p>There is more here, building toward the notion
  of system resiliency, not system correctness, as the appropriate goal.</p>
  <p>To be continued ...</p>
</blockquote>
  

<hr>

<p align="right"><small><small>created 2000-07-18-14:00 -0700 (pdt) by <a href="../construction/orcmid.htm"> orcmid</a><br>
<em>$$Author: Orcmid $<br>
$$Date: 02-10-13 12:18 $<br>
$$Revision: 6 $</em></small></small></p>

</body>
</html>
